// Code generated by protoc-gen-go. DO NOT EDIT.

package muamalahmatrix

import (
	"context"
	"fmt"
	"io"
	"log"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// MuamalahMatrixBackendClient is the client API for MuamalahMatrixBackend service.
type MuamalahMatrixBackendClient struct {
	cc grpc.ClientConn
}

func NewMuamalahMatrixBackendClient(cc grpc.ClientConn) MuamalahMatrixBackendClient {
	return MuamalahMatrixBackendClient{cc}
}

func (c MuamalahMatrixBackendClient) CreateTransaction(ctx context.Context, req *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	out, err := c.cc.Invoke(ctx, "/muamalahmatrix.MuamalahMatrixBackend/CreateTransaction", req)
	if err != nil {
		return nil, err
	}
	var resp CreateTransactionResponse
	if err := resp.Unmarshal(out); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c MuamalahMatrixBackendClient) GetTransaction(ctx context.Context, req *GetTransactionRequest) (*GetTransactionResponse, error) {
	out, err := c.cc.Invoke(ctx, "/muamalahmatrix.MuamalahMatrixBackend/GetTransaction", req)
	if err != nil {
		return nil, err
	}
	var resp GetTransactionResponse
	if err := resp.Unmarshal(out); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c MuamalahMatrixBackendClient) UpdateTransaction(ctx context.Context, req *UpdateTransactionRequest) (*UpdateTransactionResponse, error) {
	out, err := c.cc.Invoke(ctx, "/muamalahmatrix.MuamalahMatrixBackend/UpdateTransaction", req)
	if err != nil {
		return nil, err
	}
	var resp UpdateTransactionResponse
	if err := resp.Unmarshal(out); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c MuamalahMatrixBackendClient) DeleteTransaction(ctx context.Context, req *DeleteTransactionRequest) (*DeleteTransactionResponse, error) {
	out, err := c.cc.Invoke(ctx, "/muamalahmatrix.MuamalahMatrixBackend/DeleteTransaction", req)
	if err != nil {
		return nil, err
	}
	var resp DeleteTransactionResponse
	if err := resp.Unmarshal(out); err != nil {
		return nil, err
	}
	return &resp, nil
}

// MuamalahMatrixBackendServer is the server API for MuamalahMatrixBackend service.
type MuamalahMatrixBackendServer struct{}

func (s MuamalahMatrixBackendServer) CreateTransaction(ctx context.Context, req *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	// Implement the CreateTransaction logic here
	return &CreateTransactionResponse{TransactionId: "transaction123", Message: "Transaction created successfully"}, nil
}

func (s MuamalahMatrixBackendServer) GetTransaction(ctx context.Context, req *GetTransactionRequest) (*GetTransactionResponse, error) {
	// Implement the GetTransaction logic here
	return &GetTransactionResponse{TransactionId: "transaction123", UserId: "user123", Amount: 100, TransactionType: "credit"}, nil
}

func (s MuamalahMatrixBackendServer) UpdateTransaction(ctx context.Context, req *UpdateTransactionRequest) (*UpdateTransactionResponse, error) {
	// Implement the UpdateTransaction logic here
	return &UpdateTransactionResponse{TransactionId: "transaction123", Message: "Transaction updated successfully"}, nil
}

func (s MuamalahMatrixBackendServer) DeleteTransaction(ctx context.Context, req *DeleteTransactionRequest) (*DeleteTransactionResponse, error) {
	// Implement the DeleteTransaction logic here
	return &DeleteTransactionResponse{TransactionId: "transaction123", Message: "Transaction deleted successfully"}, nil
}

func RegisterMuamalahMatrixBackendServer(srv *grpc.Server, ss MuamalahMatrixBackendServer) {
	srv.RegisterService(&MuamalahMatrixBackend_ServiceDesc, ss)
}

func _ MuamalahMatrixBackend_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuamalahMatrixBackendServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/muamalahmatrix.MuamalahMatrixBackend/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuamalahMatrixBackendServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ MuamalahMatrixBackend_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuamalahMatrixBackendServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/muamalahmatrix.MuamalahMatrixBackend/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuamalahMatrixBackendServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ MuamalahMatrixBackend_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuamalahMatrixBackendServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/muamalahmatrix.MuamalahMatrixBackend/UpdateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuamalahMatrixBackendServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ MuamalahMatrixBackend_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuamalahMatrixBackendServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/muamalahmatrix.MuamalahMatrixBackend/DeleteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuamalahMatrixBackendServer).DeleteTransaction(ctx, req.(*DeleteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MuamalahMatrixBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "muamalahmatrix.MuamalahMatrixBackend",
	HandlerType: (*MuamalahMatrixBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _MuamalahMatrixBackend_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _MuamalahMatrixBackend_GetTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _MuamalahMatrixBackend_UpdateTransaction_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _MuamalahMatrixBackend_DeleteTransaction_Handler,
		},
	},
	Streams:[]grpc.StreamDesc{},
	Metadata: "muamalah-matrix-backend.proto",
}

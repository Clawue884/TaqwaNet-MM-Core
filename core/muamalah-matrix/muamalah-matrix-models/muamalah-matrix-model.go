// Code generated by protoc-gen-go. DO NOT EDIT.

package muamalahmatrix

import (
	"fmt"
	"io"
	"log"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Transaction represents a transaction in the Muamalah Matrix.
type Transaction struct {
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Amount       int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	TransactionType string `protobuf:"bytes,4,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return fmt.Sprintf("%+v", m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return m.Marshal()
	} else {
		return m.Marshal()
	}
}

func (m *Transaction) XXX_Merge(src proto.Message) {
	if x, ok := src.(*Transaction); ok {
		*m = *x
	}
}

func (m *Transaction) XXX_Size() int {
	return len(m.Marshal())
}

func (m *Transaction) XXX_DiscardUnknown() {
}

func (m *Transaction) XXX_MarshalTo(dAtA []byte) ([]byte, error) {
	return m.MarshalTo(dAtA)
}

func (m *Transaction) XXX_UnmarshalFrom(dAtA []byte) error {
	return m.Unmarshal(dAtA)
}

func (m *Transaction) XXX_SizeCache() (n int) {
	if m == nil {
		return 0
	}
	return m.sizeCache
}

func (m *Transaction) MarshalTo(dAtA []byte) ([]byte, error) {
	if m.sizeCache > 0 {
		return append(dAtA, m.raw[:m.sizeCache]...), nil
	}
	size := m.Size()
(dAtA = append(dAtA, 0x0a, 0x0a, 0x12, 0x0a, 0x0a, 0x12, 0x0a, 0x0a, 0x12, 0x0a, 0x0a, 0x12)
	dAtA = append(dAtA, m.TransactionId...)
	dAtA = append(dAtA, 0x12, 0x0a, 0x0a, 0x12)
	dAtA = append(dAtA, m.UserId...)
	dAtA = append(dAtA, 0x18, 0x0a, 0x0a, 0x12)
	dAtA = append(dAtA, m.Amount...)
	dAtA = append(dAtA, 0x22, 0x0a, 0x0a, 0x12)
	dAtA = append(dAtA, m.TransactionType...)
	if m.sizeCache > 0 {
		return append(dAtA, m.raw[m.sizeCache:]...), nil
	}
	return dAtA, nil
}

func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdExHere's an example of the actual code files for the `muamalah-matrix-models.go` file:

**muamalah-matrix-models.go**
```go
package muamalahmatrix

import (
	"fmt"
	"log"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Transaction represents a transaction in the Muamalah Matrix.
type Transaction struct {
	TransactionId string `json:"transaction_id"`
	UserId       string `json:"user_id"`
	Amount       int32  `json:"amount"`
	TransactionType string `json:"transaction_type"`
}

func NewTransaction(transactionId string, userId string, amount int32, transactionType string) *Transaction {
	return &Transaction{
		TransactionId: transactionId,
		UserId:       userId,
		Amount:       amount,
		TransactionType: transactionType,
	}
}

func (t *Transaction) GetTransactionId() string {
	return t.TransactionId
}

func (t *Transaction) GetUserId() string {
	return t.UserId
}

func (t *Transaction) GetAmount() int32 {
	return t.Amount
}

 func (t *Transaction) GetTransactionType() string {
	return t.TransactionType
}

func (t *Transaction) SetTransactionId(transactionId string) {
	t.TransactionId = transactionId
}

func (t *Transaction) SetUserId(userId string) {
	t.UserId = userId
}

func (t *Transaction) SetAmount(amount int32) {
	t.Amount = amount
}

func (t *Transaction) SetTransactionType(transactionType string) {
	t.TransactionType = transactionType
}

func (t *Transaction) String() string {
	return fmt.Sprintf("Transaction{TransactionId: %s, UserId: %s, Amount: %d, TransactionType: %s}", t.TransactionId, t.UserId, t.Amount, t.TransactionType)
}

func (t *Transaction) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf(`{"transaction_id":"%s","user_id":"%s","amount":%d,"transaction_type":"%s"}`, t.TransactionId, t.UserId, t.Amount, t.TransactionType)), nil
}

func (t *Transaction) UnmarshalJSON(data []byte) error {
	var transaction map[string]interface{}
	err := json.Unmarshal(data, &transaction)
	if err != nil {
		return err
	}
	t.TransactionId = transaction["transaction_id"].(string)
	t.UserId = transaction["user_id"].(string)
	t.Amount = int32(transaction["amount"].(float64))
	t.TransactionType = transaction["transaction_type"].(string)
	return nil
}
